# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: product-service
frameworkVersion: '2'

provider:
  name: aws
  runtime: nodejs12.x
  stage: dev
  region: eu-west-1

plugins:
  - serverless-webpack
  - serverless-aws-documentation

custom:
  webpack:
    webpackConfig: ./webpack.config.js
    includeModules: true # enable auto-packing of external modules
  documentation:
    api:
      info:
        description: "This is an API example for Products"
        version: "1.0.0"
        title: "Products Store"
      host: "execute-api.eu-west-1.amazonaws.com"
      basePath: "/v2"
      tags:
        - name: "product"
          description: "Everything about Products"
          externalDocs:
            description: "Find out more"
            url: "http://swagger.io"
      schemes:
        - "https"
      paths:
        /products:
          get:
            tags:
              - "product"
            summary: "Finds all Products"
            description: "Returns a list of products"
            operationId: "findAllProducts"
            produces:
              - "application/json"
            responses:
              "200":
                description: "successful operation"
                schema:
                  type: "array"
                  items:
                    $ref: "#/definitions/Product"
            security:
              - productstore_auth:
                  - "write:products"
                  - "read:products"
        /products/{productId}:
          get:
            tags:
              - "product"
            summary: "Find product by ID"
            description: "Returns a single product"
            operationId: "getProductById"
            produces:
              - "application/json"
            parameters:
              - name: "productId"
                in: "path"
                description: "ID of product to return"
                required: true
                type: "string"
            responses:
              "200":
                description: "successful operation"
                schema:
                  $ref: "#/definitions/Product"
              "400":
                description: "Invalid ID supplied"
              "404":
                description: "Product not found"
            security:
              - api_key: []
      securityDefinitions:
        productstore_auth:
          type: "oauth2"
          authorizationUrl: "https://ls2z4pea12.execute-api.eu-west-1.amazonaws.com/dev/products"
          flow: "implicit"
          scopes:
            write:products: "modify products in your account"
            read:products: "read your products"
        api_key:
          type: "apiKey"
          name: "api_key"
          in: "header"
      definitions:
        Product:
          type: "object"
          required:
            - "id"
            - "title"
            - "description"
            - "count"
            - "price"
          properties:
            id:
              type: "string"
            title:
              type: "string"
              example: "ProductNew"
            description:
              type: "string"
              example: "Short Product Description3"
            count:
              type: "number"
              format: "int64"
              example: "5"
            price:
              type: "number"
              format: "int64"
              example: "15"
          xml:
            name: "Products"
        ApiResponse:
          type: "object"
          properties:
            code:
              type: "integer"
              format: "int32"
            type:
              type: "string"
            message:
              type: "string"


functions:
  getProductsList:
    handler: handler.getProductsList
    events:
      - http:
          path: products
          method: get
  getProductById:
    handler: handler.getProductById
    events:
      - http:
          path: products/{productId}
          method: get
#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - http:
#          path: users/create
#          method: get
#      - websocket: $connect
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp
#      - alb:
#          listenerArn: arn:aws:elasticloadbalancing:us-east-1:XXXXXX:listener/app/my-load-balancer/50dc6c495c0c9188/
#          priority: 1
#          conditions:
#            host: example.com
#            path: /hello

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
#resources:
#  Resources:
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"
