service: product-service
frameworkVersion: '2'

provider:
  name: aws
  runtime: nodejs12.x
  stage: dev
  region: eu-west-1

plugins:
  - serverless-webpack
  - serverless-aws-documentation
  - serverless-dotenv-plugin

custom:
  webpack:
    webpackConfig: ./webpack.config.js
    includeModules: true
  documentation:
    api:
      info:
        description: "This is an API example for Products"
        version: "1.0.0"
        title: "Products Store"
      host: "execute-api.eu-west-1.amazonaws.com"
      basePath: "/v2"
      tags:
        - name: "product"
          description: "Everything about Products"
          externalDocs:
            description: "Find out more"
            url: "http://swagger.io"
      schemes:
        - "https"
      paths:
        /products:
          get:
            tags:
              - "product"
            summary: "Finds all Products"
            description: "Returns a list of products"
            operationId: "findAllProducts"
            produces:
              - "application/json"
            responses:
              "200":
                description: "successful operation"
                schema:
                  type: "array"
                  items:
                    $ref: "#/definitions/Product"
            security:
              - productstore_auth:
                  - "write:products"
                  - "read:products"
        /products/{productId}:
          get:
            tags:
              - "product"
            summary: "Find product by ID"
            description: "Returns a single product"
            operationId: "getProductById"
            produces:
              - "application/json"
            parameters:
              - name: "productId"
                in: "path"
                description: "ID of product to return"
                required: true
                type: "string"
            responses:
              "200":
                description: "successful operation"
                schema:
                  $ref: "#/definitions/Product"
              "400":
                description: "Invalid ID supplied"
              "404":
                description: "Product not found"
            security:
              - api_key: []
      securityDefinitions:
        productstore_auth:
          type: "oauth2"
          authorizationUrl: "https://ls2z4pea12.execute-api.eu-west-1.amazonaws.com/dev/products"
          flow: "implicit"
          scopes:
            write:products: "modify products in your account"
            read:products: "read your products"
        api_key:
          type: "apiKey"
          name: "api_key"
          in: "header"
      definitions:
        Product:
          type: "object"
          required:
            - "id"
            - "title"
            - "description"
            - "count"
            - "price"
          properties:
            id:
              type: "string"
            title:
              type: "string"
              example: "ProductNew"
            description:
              type: "string"
              example: "Short Product Description3"
            count:
              type: "number"
              format: "int64"
              example: "5"
            price:
              type: "number"
              format: "int64"
              example: "15"
          xml:
            name: "Products"
        ApiResponse:
          type: "object"
          properties:
            code:
              type: "integer"
              format: "int32"
            type:
              type: "string"
            message:
              type: "string"


functions:
  getProductsList:
    handler: handler.getProductsList
    events:
      - http:
          path: products
          method: get
          cors: true
  getProductById:
    handler: handler.getProductById
    events:
      - http:
          path: products/{productId}
          method: get
          cors: true
  createProduct:
    handler: handler.createProduct
    events:
      - http:
          path: products/
          method: post
          cors: true
